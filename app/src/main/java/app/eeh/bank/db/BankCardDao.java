package app.eeh.bank.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import app.eeh.bank.db.table.BankCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_CARD".
*/
public class BankCardDao extends AbstractDao<BankCard, Long> {

    public static final String TABLENAME = "BANK_CARD";

    /**
     * Properties of entity BankCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankName = new Property(1, String.class, "bankName", false, "BANK_NAME");
        public final static Property BankNumber = new Property(2, String.class, "bankNumber", false, "BANK_NUMBER");
        public final static Property AmountNum = new Property(3, String.class, "amountNum", false, "AMOUNT_NUM");
        public final static Property MiniNum = new Property(4, String.class, "miniNum", false, "MINI_NUM");
        public final static Property MiniData = new Property(5, String.class, "miniData", false, "MINI_DATA");
        public final static Property Repayment = new Property(6, String.class, "repayment", false, "REPAYMENT");
        public final static Property RepaymentData = new Property(7, String.class, "repaymentData", false, "REPAYMENT_DATA");
    }


    public BankCardDao(DaoConfig config) {
        super(config);
    }
    
    public BankCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BANK_NAME\" TEXT," + // 1: bankName
                "\"BANK_NUMBER\" TEXT," + // 2: bankNumber
                "\"AMOUNT_NUM\" TEXT," + // 3: amountNum
                "\"MINI_NUM\" TEXT," + // 4: miniNum
                "\"MINI_DATA\" TEXT," + // 5: miniData
                "\"REPAYMENT\" TEXT," + // 6: repayment
                "\"REPAYMENT_DATA\" TEXT);"); // 7: repaymentData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(2, bankName);
        }
 
        String bankNumber = entity.getBankNumber();
        if (bankNumber != null) {
            stmt.bindString(3, bankNumber);
        }
 
        String amountNum = entity.getAmountNum();
        if (amountNum != null) {
            stmt.bindString(4, amountNum);
        }
 
        String miniNum = entity.getMiniNum();
        if (miniNum != null) {
            stmt.bindString(5, miniNum);
        }
 
        String miniData = entity.getMiniData();
        if (miniData != null) {
            stmt.bindString(6, miniData);
        }
 
        String repayment = entity.getRepayment();
        if (repayment != null) {
            stmt.bindString(7, repayment);
        }
 
        String repaymentData = entity.getRepaymentData();
        if (repaymentData != null) {
            stmt.bindString(8, repaymentData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(2, bankName);
        }
 
        String bankNumber = entity.getBankNumber();
        if (bankNumber != null) {
            stmt.bindString(3, bankNumber);
        }
 
        String amountNum = entity.getAmountNum();
        if (amountNum != null) {
            stmt.bindString(4, amountNum);
        }
 
        String miniNum = entity.getMiniNum();
        if (miniNum != null) {
            stmt.bindString(5, miniNum);
        }
 
        String miniData = entity.getMiniData();
        if (miniData != null) {
            stmt.bindString(6, miniData);
        }
 
        String repayment = entity.getRepayment();
        if (repayment != null) {
            stmt.bindString(7, repayment);
        }
 
        String repaymentData = entity.getRepaymentData();
        if (repaymentData != null) {
            stmt.bindString(8, repaymentData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BankCard readEntity(Cursor cursor, int offset) {
        BankCard entity = new BankCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bankNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // amountNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // miniNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // miniData
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // repayment
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // repaymentData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBankNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmountNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMiniNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMiniData(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRepayment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRepaymentData(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
